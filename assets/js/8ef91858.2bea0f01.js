"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[91765],{9980:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"core/database","title":"Database System","description":"Understanding ElizaOS database system - persistent storage and data management for agents","source":"@site/docs/core/database.md","sourceDirName":"core","slug":"/core/database","permalink":"/docs/core/database","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/database.md","tags":[],"version":"current","lastUpdatedBy":"Shaw","lastUpdatedAt":1748825127000,"sidebarPosition":7,"frontMatter":{"sidebar_position":7,"title":"Database System","description":"Understanding ElizaOS database system - persistent storage and data management for agents","keywords":["database","storage","adapters","PostgreSQL","PGLite","entities","memories","relationships"],"image":"/img/database.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Agent Runtime","permalink":"/docs/core/agents"},"next":{"title":"Entities","permalink":"/docs/core/entities"}}');var i=t(31085),r=t(71184);const d={sidebar_position:7,title:"Database System",description:"Understanding ElizaOS database system - persistent storage and data management for agents",keywords:["database","storage","adapters","PostgreSQL","PGLite","entities","memories","relationships"],image:"/img/database.jpg"},a="\ud83d\udcbe Database System",l={},o=[{value:"Overview",id:"overview",level:2},{value:"Core Functionality",id:"core-functionality",level:2},{value:"Entity System",id:"entity-system",level:3},{value:"Memory Management",id:"memory-management",level:3},{value:"Room &amp; Participant Management",id:"room--participant-management",level:3},{value:"Relationship Management",id:"relationship-management",level:3},{value:"Caching System",id:"caching-system",level:3},{value:"World &amp; Task Management",id:"world--task-management",level:3},{value:"Agent Management",id:"agent-management",level:3},{value:"Embedding &amp; Search",id:"embedding--search",level:3},{value:"Architecture",id:"architecture",level:2},{value:"Implementation",id:"implementation",level:2},{value:"Initialization",id:"initialization",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Retry Logic &amp; Error Handling",id:"retry-logic--error-handling",level:3},{value:"Example Usage",id:"example-usage",level:2},{value:"Store a Memory",id:"store-a-memory",level:3},{value:"Search for Memories",id:"search-for-memories",level:3},{value:"Manage Entity Relationships",id:"manage-entity-relationships",level:3},{value:"Database Schema",id:"database-schema",level:2},{value:"Core Tables",id:"core-tables",level:3},{value:"Entity-Component System",id:"entity-component-system",level:3},{value:"Vector Search",id:"vector-search",level:2},{value:"FAQ",id:"faq",level:2},{value:"How do I choose between PGLite and PostgreSQL?",id:"how-do-i-choose-between-pglite-and-postgresql",level:3},{value:"How do I configure the database connection?",id:"how-do-i-configure-the-database-connection",level:3},{value:"How can I inspect the database contents?",id:"how-can-i-inspect-the-database-contents",level:3},{value:"How do I migrate between different database adapters?",id:"how-do-i-migrate-between-different-database-adapters",level:3},{value:"What about vector embedding dimension mismatches?",id:"what-about-vector-embedding-dimension-mismatches",level:3},{value:"How does the entity-component system work?",id:"how-does-the-entity-component-system-work",level:3},{value:"How can I improve database performance?",id:"how-can-i-improve-database-performance",level:3},{value:"Will other database adapters be supported in the future?",id:"will-other-database-adapters-be-supported-in-the-future",level:3},{value:"Further Reading",id:"further-reading",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"-database-system",children:"\ud83d\udcbe Database System"})}),"\n",(0,i.jsx)(n.p,{children:"The ElizaOS database system provides persistent storage capabilities for agents. It handles memory storage, entity relationships, knowledge management, and more through a flexible adapter-based architecture."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.mermaid,{value:'graph TB\n    %% Main Components\n    Runtime([Agent Runtime])\n    DbAdapter([Database Adapter])\n    DbConnection[("Database (PGLite/PostgreSQL)")]\n\n    %% Data Models in compact form\n    DataModels["Data Models: Entities, Components, Memories, Relationships, Rooms, Worlds, Tasks Cache"]\n\n    %% Vector Search\n    VectorStore[(Vector Store)]\n\n    %% Memories Knowledge\n    MemoriesKnowledge[(Memories / Knowledge)]\n\n    %% Connection flow\n    Runtime --\x3e|Uses| DbAdapter\n    DbAdapter --\x3e|Connects to| DbConnection\n    DbConnection --\x3e|Stores & Retrieves| DataModels\n\n    %% Connect Vector Store\n    DbConnection --\x3e|Utilizes| VectorStore\n    VectorStore --\x3e|Enables Search on| MemoriesKnowledge\n\n    %% Styling\n    classDef default fill:#f0f4f8,stroke:#2c3e50,stroke-width:1px;\n    classDef runtime fill:#3498db,stroke:#2c3e50,stroke-width:1px,color:#fff;\n    classDef adapter fill:#9b59b6,stroke:#2c3e50,stroke-width:1px,color:#fff;\n    classDef db fill:#27ae60,stroke:#2c3e50,stroke-width:1px,color:#fff;\n    classDef datamodels fill:#52be80,stroke:#2c3e50,stroke-width:1px,color:#fff;\n    classDef memories fill:#2c5e1a,stroke:#2c3333,stroke-width:1px,color:#fff;\n\n    class Runtime runtime;\n    class DbAdapter adapter;\n    class DbConnection,VectorStore db;\n    class DataModels datamodels;\n    class MemoriesKnowledge memories;'}),"\n",(0,i.jsxs)(n.p,{children:["ElizaOS uses a unified database architecture based on Drizzle ORM with adapters that implement the ",(0,i.jsx)(n.a,{href:"/api/interfaces/IDatabaseAdapter",children:(0,i.jsx)(n.code,{children:"IDatabaseAdapter"})})," interface. The current release includes support for:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Adapter"}),(0,i.jsx)(n.th,{children:"Best For"}),(0,i.jsx)(n.th,{children:"Key Features"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PGLite"})}),(0,i.jsx)(n.td,{children:"Local development & testing"}),(0,i.jsx)(n.td,{children:"Lightweight PostgreSQL implementation running in Node.js process"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"PostgreSQL"})}),(0,i.jsx)(n.td,{children:"Production deployments"}),(0,i.jsx)(n.td,{children:"Full PostgreSQL with vector search, scaling, and high reliability"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:"Additional database adapters will be supported in future releases as ElizaOS continues to evolve."}),"\n",(0,i.jsx)(n.h2,{id:"core-functionality",children:"Core Functionality"}),"\n",(0,i.jsxs)(n.p,{children:["All database adapters extend the ",(0,i.jsx)(n.code,{children:"BaseDrizzleAdapter"})," abstract class, which provides a comprehensive set of methods for managing all aspects of agent data:"]}),"\n",(0,i.jsx)(n.h3,{id:"entity-system",children:"Entity System"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createEntity()"})}),(0,i.jsx)(n.td,{children:"Create a new entity"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getEntityById()"})}),(0,i.jsx)(n.td,{children:"Retrieve an entity by ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getEntitiesForRoom()"})}),(0,i.jsx)(n.td,{children:"Get all entities in a room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateEntity()"})}),(0,i.jsx)(n.td,{children:"Update entity attributes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getComponent()"})}),(0,i.jsx)(n.td,{children:"Get a specific component of an entity"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getComponents()"})}),(0,i.jsx)(n.td,{children:"Get all components for an entity"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createComponent()"})}),(0,i.jsx)(n.td,{children:"Add a component to an entity"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateComponent()"})}),(0,i.jsx)(n.td,{children:"Update a component"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteComponent()"})}),(0,i.jsx)(n.td,{children:"Remove a component"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"memory-management",children:"Memory Management"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createMemory()"})}),(0,i.jsx)(n.td,{children:"Store a new memory with metadata"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getMemoryById()"})}),(0,i.jsx)(n.td,{children:"Retrieve a specific memory"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getMemories()"})}),(0,i.jsx)(n.td,{children:"Get memories matching criteria"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getMemoriesByIds()"})}),(0,i.jsx)(n.td,{children:"Get multiple memories by IDs"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getMemoriesByRoomIds()"})}),(0,i.jsx)(n.td,{children:"Get memories from multiple rooms"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"searchMemories()"})}),(0,i.jsx)(n.td,{children:"Search memories by vector similarity"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"searchMemoriesByEmbedding()"})}),(0,i.jsx)(n.td,{children:"Search using raw embedding vector"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteMemory()"})}),(0,i.jsx)(n.td,{children:"Remove a specific memory"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteAllMemories()"})}),(0,i.jsx)(n.td,{children:"Remove all memories in a room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"countMemories()"})}),(0,i.jsx)(n.td,{children:"Count memories matching criteria"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"room--participant-management",children:"Room & Participant Management"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createRoom()"})}),(0,i.jsx)(n.td,{children:"Create a new conversation room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getRoom()"})}),(0,i.jsx)(n.td,{children:"Get room by ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getRooms()"})}),(0,i.jsx)(n.td,{children:"Get all rooms in a world"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateRoom()"})}),(0,i.jsx)(n.td,{children:"Update room attributes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteRoom()"})}),(0,i.jsx)(n.td,{children:"Remove a room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"addParticipant()"})}),(0,i.jsx)(n.td,{children:"Add entity to room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"removeParticipant()"})}),(0,i.jsx)(n.td,{children:"Remove entity from room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getParticipantsForEntity()"})}),(0,i.jsx)(n.td,{children:"Get all rooms an entity is in"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getParticipantsForRoom()"})}),(0,i.jsx)(n.td,{children:"List entities in a room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getParticipantUserState()"})}),(0,i.jsx)(n.td,{children:"Get entity's state in a room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"setParticipantUserState()"})}),(0,i.jsx)(n.td,{children:"Update entity's state in a room"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"relationship-management",children:"Relationship Management"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createRelationship()"})}),(0,i.jsx)(n.td,{children:"Create a relationship between entities"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateRelationship()"})}),(0,i.jsx)(n.td,{children:"Update relationship attributes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getRelationship()"})}),(0,i.jsx)(n.td,{children:"Get a specific relationship"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getRelationships()"})}),(0,i.jsx)(n.td,{children:"Get all relationships for an entity"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"caching-system",children:"Caching System"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getCache()"})}),(0,i.jsx)(n.td,{children:"Retrieve cached data"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"setCache()"})}),(0,i.jsx)(n.td,{children:"Store data in cache"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteCache()"})}),(0,i.jsx)(n.td,{children:"Remove data from cache"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"world--task-management",children:"World & Task Management"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createWorld()"})}),(0,i.jsx)(n.td,{children:"Create a new world"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getWorld()"})}),(0,i.jsx)(n.td,{children:"Get world by ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getAllWorlds()"})}),(0,i.jsx)(n.td,{children:"List all worlds"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateWorld()"})}),(0,i.jsx)(n.td,{children:"Update world attributes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"removeWorld()"})}),(0,i.jsx)(n.td,{children:"Delete a world"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createTask()"})}),(0,i.jsx)(n.td,{children:"Create a new task"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getTasks()"})}),(0,i.jsx)(n.td,{children:"Get tasks matching criteria"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getTasksByName()"})}),(0,i.jsx)(n.td,{children:"Find tasks by name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getTask()"})}),(0,i.jsx)(n.td,{children:"Get task by ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateTask()"})}),(0,i.jsx)(n.td,{children:"Update task attributes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteTask()"})}),(0,i.jsx)(n.td,{children:"Remove a task"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"agent-management",children:"Agent Management"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"createAgent()"})}),(0,i.jsx)(n.td,{children:"Create a new agent record"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getAgent()"})}),(0,i.jsx)(n.td,{children:"Get agent by ID"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getAgents()"})}),(0,i.jsx)(n.td,{children:"List all agents"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"updateAgent()"})}),(0,i.jsx)(n.td,{children:"Update agent attributes"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"deleteAgent()"})}),(0,i.jsx)(n.td,{children:"Remove an agent"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"countAgents()"})}),(0,i.jsx)(n.td,{children:"Count total agents"})]})]})]}),"\n",(0,i.jsx)(n.h3,{id:"embedding--search",children:"Embedding & Search"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Method"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"ensureEmbeddingDimension()"})}),(0,i.jsx)(n.td,{children:"Configure embedding dimensions"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"getCachedEmbeddings()"})}),(0,i.jsx)(n.td,{children:"Retrieve cached embeddings"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"searchMemories()"})}),(0,i.jsx)(n.td,{children:"Vector search for memories"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"searchMemoriesByEmbedding()"})}),(0,i.jsx)(n.td,{children:"Advanced vector search"})]})]})]}),"\n",(0,i.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,i.jsx)(n.p,{children:"ElizaOS uses a singleton pattern for database connections to ensure efficient resource usage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502           AgentRuntime              \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        IDatabaseAdapter             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n                \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502       BaseDrizzleAdapter            \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                \u2502\n        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n        \u25bc               \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 PGLiteAdapter \u2502 \u2502 PostgresAdapter \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n        \u2502                  \u2502\n        \u25bc                  \u25bc\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502PGLiteManager  \u2502 \u2502PostgresManager  \u2502\n\u2502  (Singleton)  \u2502 \u2502  (Singleton)    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,i.jsx)(n.p,{children:"Each adapter is associated with a singleton connection manager that ensures only one database connection is maintained per process, regardless of how many agents are running."}),"\n",(0,i.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,i.jsx)(n.h3,{id:"initialization",children:"Initialization"}),"\n",(0,i.jsx)(n.p,{children:"The database adapter is initialized through the SQL plugin:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Plugin registration in project configuration\nconst project = {\n  plugins: ['@elizaos/plugin-sql'],\n  // ...\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"The SQL plugin automatically selects and initializes the appropriate database adapter based on environment settings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"function createDatabaseAdapter(\n  config: {\n    dataDir?: string;\n    postgresUrl?: string;\n  },\n  agentId: UUID\n): IDatabaseAdapter {\n  if (config.postgresUrl) {\n    return new PgDatabaseAdapter(agentId, postgresConnectionManager);\n  }\n\n  // Default to PGLite\n  return new SqliteDatabaseAdapter(agentId, pgLiteClientManager);\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,i.jsx)(n.p,{children:"Configure the database adapter using environment variables or settings:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// For PostgreSQL\nprocess.env.POSTGRES_URL = 'postgresql://username:password@localhost:5432/elizaos';\n\n// For PGLite (default)\nprocess.env.SQLITE_DATA_DIR = './.elizadb'; // Optional, defaults to './sqlite'\n"})}),"\n",(0,i.jsx)(n.h3,{id:"retry-logic--error-handling",children:"Retry Logic & Error Handling"}),"\n",(0,i.jsx)(n.p,{children:"The database system includes built-in retry logic with exponential backoff and jitter:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"protected async withRetry<T>(operation: () => Promise<T>): Promise<T> {\n  let attempt = 0;\n  let lastError: Error | null = null;\n\n  while (attempt < this.maxRetries) {\n    try {\n      return await operation();\n    } catch (error) {\n      lastError = error as Error;\n      const isRetryable = this.isRetryableError(error);\n\n      if (!isRetryable) {\n        break;\n      }\n\n      // Calculate delay with exponential backoff and jitter\n      const delay = Math.min(\n        this.baseDelay * Math.pow(2, attempt) + Math.random() * this.jitterMax,\n        this.maxDelay\n      );\n\n      await new Promise(resolve => setTimeout(resolve, delay));\n      attempt++;\n    }\n  }\n\n  throw lastError;\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(n.p,{children:"Here are examples of common database operations:"}),"\n",(0,i.jsx)(n.h3,{id:"store-a-memory",children:"Store a Memory"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await runtime.createMemory(\n  {\n    entityId: message.entityId,\n    agentId: runtime.agentId,\n    content: { text: 'Important information to remember' },\n    roomId: message.roomId,\n    embedding: await runtime.useModel(ModelType.TEXT_EMBEDDING, {\n      text: 'Important information to remember',\n    }),\n  },\n  'facts'\n);\n"})}),"\n",(0,i.jsx)(n.h3,{id:"search-for-memories",children:"Search for Memories"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"const embedding = await runtime.useModel(ModelType.TEXT_EMBEDDING, {\n  text: 'What did we discuss about databases?',\n});\n\nconst relevantMemories = await runtime.searchMemories({\n  tableName: 'messages',\n  embedding,\n  roomId: message.roomId,\n  count: 5,\n});\n"})}),"\n",(0,i.jsx)(n.h3,{id:"manage-entity-relationships",children:"Manage Entity Relationships"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"// Create a relationship between entities\nawait runtime.createRelationship({\n  sourceEntityId: userEntityId,\n  targetEntityId: agentEntityId,\n  tags: ['friend', 'frequent_interaction'],\n  metadata: {\n    interactions: 42,\n    trust_level: 'high',\n  },\n});\n\n// Retrieve relationships\nconst relationships = await runtime.getRelationships({\n  entityId: userEntityId,\n  tags: ['friend'],\n});\n"})}),"\n",(0,i.jsx)(n.h2,{id:"database-schema",children:"Database Schema"}),"\n",(0,i.jsx)(n.p,{children:"The schema is managed by Drizzle ORM and includes the following key tables:"}),"\n",(0,i.jsx)(n.h3,{id:"core-tables",children:"Core Tables"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"entities"}),": The fundamental objects in the system (users, agents, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"components"}),": Modular data attached to entities (profiles, settings, etc.)"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"memories"}),": Conversation history and other remembered information"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"relationships"}),": Connections between entities"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"rooms"}),": Conversation channels"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"participants"}),": Entity participation in rooms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"worlds"}),": Container for multiple rooms"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tasks"}),": Scheduled or queued operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"cache"}),": Temporary key-value storage"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"agents"}),": Agent configuration and state"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"entity-component-system",children:"Entity-Component System"}),"\n",(0,i.jsx)(n.p,{children:"ElizaOS uses an entity-component architecture where:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Entities are the base objects (users, agents, etc.)"}),"\n",(0,i.jsx)(n.li,{children:"Components are pieces of data attached to entities"}),"\n",(0,i.jsx)(n.li,{children:"This allows for flexible data modeling and extension"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, a user entity might have profile, preferences, and authentication components."}),"\n",(0,i.jsx)(n.h2,{id:"vector-search",children:"Vector Search"}),"\n",(0,i.jsx)(n.p,{children:"Both adapters support vector-based semantic search with some differences:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PostgreSQL"}),": Uses pgvector extension for optimized vector operations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"PGLite"}),": Implements vector search in JavaScript with an efficient algorithm"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The embedding dimension is configurable based on the model used:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-typescript",children:"await adapter.ensureEmbeddingDimension(1536); // For OpenAI embeddings\n"})}),"\n",(0,i.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-choose-between-pglite-and-postgresql",children:"How do I choose between PGLite and PostgreSQL?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.strong,{children:"PGLite"})," for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Local development and testing"}),"\n",(0,i.jsx)(n.li,{children:"Single-user deployments"}),"\n",(0,i.jsx)(n.li,{children:"Situations where installing PostgreSQL is impractical"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.strong,{children:"PostgreSQL"})," for:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Production deployments"}),"\n",(0,i.jsx)(n.li,{children:"Multi-user systems"}),"\n",(0,i.jsx)(n.li,{children:"High-volume data"}),"\n",(0,i.jsx)(n.li,{children:"When you need advanced scaling features"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-configure-the-database-connection",children:"How do I configure the database connection?"}),"\n",(0,i.jsxs)(n.p,{children:["For PostgreSQL, set the ",(0,i.jsx)(n.code,{children:"POSTGRES_URL"})," environment variable:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"POSTGRES_URL=postgresql://username:password@localhost:5432/elizaos\n"})}),"\n",(0,i.jsx)(n.p,{children:"For PGLite, set the data directory (optional):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"SQLITE_DATA_DIR=./my-data\n"})}),"\n",(0,i.jsx)(n.h3,{id:"how-can-i-inspect-the-database-contents",children:"How can I inspect the database contents?"}),"\n",(0,i.jsx)(n.p,{children:"For PostgreSQL, use standard PostgreSQL tools like pgAdmin or psql."}),"\n",(0,i.jsx)(n.p,{children:"For PGLite, the data is stored in the specified data directory as files. You can use tools like DB Browser for SQLite to inspect the SQLite files that PGLite generates."}),"\n",(0,i.jsx)(n.h3,{id:"how-do-i-migrate-between-different-database-adapters",children:"How do I migrate between different database adapters?"}),"\n",(0,i.jsx)(n.p,{children:"Currently, there's no built-in migration tool between adapters. For production systems, it's recommended to start with PostgreSQL if you anticipate needing its features."}),"\n",(0,i.jsx)(n.h3,{id:"what-about-vector-embedding-dimension-mismatches",children:"What about vector embedding dimension mismatches?"}),"\n",(0,i.jsx)(n.p,{children:"The system automatically handles embedding dimensions based on the model used. If you change embedding models, make sure to:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Set the correct dimension with ",(0,i.jsx)(n.code,{children:"ensureEmbeddingDimension()"})]}),"\n",(0,i.jsx)(n.li,{children:"Be aware that mixing different dimensions in the same database can cause issues"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"how-does-the-entity-component-system-work",children:"How does the entity-component system work?"}),"\n",(0,i.jsx)(n.p,{children:"The entity-component system (ECS) provides a flexible way to model data:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Entities"})," are base objects with unique IDs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Components"})," are pieces of data attached to entities"]}),"\n",(0,i.jsx)(n.li,{children:"This allows for dynamic composition of objects without complex inheritance"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example, a user entity might have profile, preferences, and authentication components."}),"\n",(0,i.jsx)(n.h3,{id:"how-can-i-improve-database-performance",children:"How can I improve database performance?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.strong,{children:"PostgreSQL"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Ensure the pgvector extension is properly installed"}),"\n",(0,i.jsx)(n.li,{children:"Index frequently queried fields"}),"\n",(0,i.jsx)(n.li,{children:"Use connection pooling"}),"\n",(0,i.jsx)(n.li,{children:"Consider partitioning for large datasets"}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["For ",(0,i.jsx)(n.strong,{children:"PGLite"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Keep database size reasonable (under 1GB)"}),"\n",(0,i.jsx)(n.li,{children:"Regularly clean up old memories"}),"\n",(0,i.jsx)(n.li,{children:"Limit the number of concurrent operations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"will-other-database-adapters-be-supported-in-the-future",children:"Will other database adapters be supported in the future?"}),"\n",(0,i.jsx)(n.p,{children:"Yes, future releases will add support for additional databases such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"MongoDB"}),"\n",(0,i.jsx)(n.li,{children:"SQLite"}),"\n",(0,i.jsx)(n.li,{children:"Supabase"}),"\n",(0,i.jsx)(n.li,{children:"Qdrant"}),"\n",(0,i.jsx)(n.li,{children:"SQL.js"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The adapter interface is designed to be extensible to support a wide range of storage solutions."}),"\n",(0,i.jsx)(n.h2,{id:"further-reading",children:"Further Reading"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/core/entities",children:"Entity System"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"/docs/core/agents",children:"Agent Runtime"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>a});var s=t(14041);const i={},r=s.createContext(i);function d(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);