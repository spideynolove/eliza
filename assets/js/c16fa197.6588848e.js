"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[12209],{71184:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var i=n(14041);const s={},r=i.createContext(s);function o(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(r.Provider,{value:t},e.children)}},78475:e=>{e.exports=JSON.parse('{"permalink":"/blog/twitter-agent-guide","editUrl":"https://github.com/elizaos/eliza/tree/develop/docs/blog/twitter-agent-guide.mdx","source":"@site/blog/twitter-agent-guide.mdx","title":"Setting Up Your Own Twitter Agent with ElizaOS","description":"Deploy a customized AI agent on Twitter","date":"2025-05-02T11:47:52.000Z","tags":[{"inline":true,"label":"twitter","permalink":"/blog/tags/twitter"},{"inline":true,"label":"agent","permalink":"/blog/tags/agent"},{"inline":true,"label":"elizaos","permalink":"/blog/tags/elizaos"},{"inline":true,"label":"tutorial","permalink":"/blog/tags/tutorial"}],"readingTime":6.765,"hasTruncateMarker":true,"authors":[{"name":"ElizaOS Team","title":"Core Team","url":"https://github.com/elizaos","socials":{"twitter":"https://twitter.com/elizaOS","github":"https://github.com/elizaOS"},"imageURL":"https://github.com/elizaos.png","key":"team","page":null}],"frontMatter":{"slug":"twitter-agent-guide","title":"Setting Up Your Own Twitter Agent with ElizaOS","authors":["team"],"tags":["twitter","agent","elizaos","tutorial"],"image":"/img/plugins.jpg"},"unlisted":false,"lastUpdatedBy":"Christopher Trimboli","prevItem":{"title":"Automating Eliza\'s Documentation","permalink":"/blog/autodocs"},"nextItem":{"title":"auto.fun: Where AI Projects Thrive, Not Just Launch","permalink":"/blog/autofun-intro"}}')},82984:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var i=n(78475),s=n(31085),r=n(71184);const o={slug:"twitter-agent-guide",title:"Setting Up Your Own Twitter Agent with ElizaOS",authors:["team"],tags:["twitter","agent","elizaos","tutorial"],image:"/img/plugins.jpg"},a="Setting Up Your Own Twitter Agent with ElizaOS",l={authorsImageUrls:[void 0]},c=[{value:"Deploy a customized AI agent on Twitter",id:"deploy-a-customized-ai-agent-on-twitter",level:2},{value:"Getting Started with ElizaOS",id:"getting-started-with-elizaos",level:2},{value:"Step 1: Install the ElizaOS CLI",id:"step-1-install-the-elizaos-cli",level:3},{value:"Step 2: Create a New Project",id:"step-2-create-a-new-project",level:3},{value:"Step 3: Configure Environment Variables",id:"step-3-configure-environment-variables",level:3},{value:"Step 4: Start Your Project",id:"step-4-start-your-project",level:3},{value:"Customizing Your Twitter Agent&#39;s Personality",id:"customizing-your-twitter-agents-personality",level:2},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Advanced Twitter Features",id:"advanced-twitter-features",level:3},{value:"Advanced: Server Deployment with Twitter Cookies",id:"advanced-server-deployment-with-twitter-cookies",level:3},{value:"Obtaining Twitter Cookies for Server Deployment",id:"obtaining-twitter-cookies-for-server-deployment",level:4}];function d(e){const t={code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h2,{id:"deploy-a-customized-ai-agent-on-twitter",children:"Deploy a customized AI agent on Twitter"}),"\n",(0,s.jsx)(t.p,{children:"ElizaOS enables the deployment of AI agents capable of automated posting and interaction on Twitter (X). This guide provides the steps to configure and run your own Twitter agent."}),"\n","\n",(0,s.jsx)(t.h2,{id:"getting-started-with-elizaos",children:"Getting Started with ElizaOS"}),"\n",(0,s.jsx)(t.p,{children:"Follow these steps to set up your Twitter agent."}),"\n",(0,s.jsx)(t.h3,{id:"step-1-install-the-elizaos-cli",children:"Step 1: Install the ElizaOS CLI"}),"\n",(0,s.jsx)(t.p,{children:"First, install the ElizaOS Command Line Interface (CLI), which provides the necessary tools for interacting with the ElizaOS platform."}),"\n",(0,s.jsx)(t.p,{children:"Open your terminal and execute the following command:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"bun install -g @elizaos/cli\n"})}),"\n",(0,s.jsx)(t.p,{children:"This command installs the ElizaOS CLI globally on your system."}),"\n",(0,s.jsx)(t.h3,{id:"step-2-create-a-new-project",children:"Step 2: Create a New Project"}),"\n",(0,s.jsx)(t.p,{children:"With the CLI installed, create a new project directory:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"elizaos create\n"})}),"\n",(0,s.jsx)(t.p,{children:"This command initiates an interactive setup wizard:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:'Enter a name for your project (e.g., "my-twitter-agent").'}),"\n",(0,s.jsx)(t.li,{children:'When prompted for a database, select "pglite" for simplified setup.'}),"\n",(0,s.jsx)(t.li,{children:"Follow the remaining prompts to configure the project."}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Alternatively, create the project non-interactively:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"elizaos create my-twitter-agent\n"})}),"\n",(0,s.jsx)(t.h3,{id:"step-3-configure-environment-variables",children:"Step 3: Configure Environment Variables"}),"\n",(0,s.jsx)(t.p,{children:"Next, configure the agent's Twitter credentials and settings using environment variables."}),"\n",(0,s.jsx)(t.p,{children:"Open the ElizaOS environment configuration file in a text editor:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# Recommended: Use Cursor (https://cursor.sh)\n# Open Cursor, navigate to File > Open, and select your project's .env file:\n# - Windows: C:\\path\\to\\your\\project\\.env\n# - Mac/Linux: ./path/to/your/project/.env\n\n# Alternative editors:\n# Windows: notepad C:\\path\\to\\your\\project\\.env\n# Mac: open -a TextEdit ./path/to/your/project/.env\n# Linux: gedit ./path/to/your/project/.env\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Add the following lines to the ",(0,s.jsx)(t.code,{children:".env"})," file, replacing placeholder values with your actual credentials and desired settings:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"# OpenAI API Key (Optional, if using OpenAI features)\nOPENAI_API_KEY=your_openai_api_key_here\n\n# Twitter Configuration (Required for agent authentication)\nTWITTER_USERNAME=your_twitter_username\nTWITTER_PASSWORD=your_twitter_password\nTWITTER_EMAIL=your_twitter_email # Required for login, can sometimes be the same as username\n\n# Automated Post Generation (Optional)\n# Enable this feature to have your agent automatically create and publish tweets.\nTWITTER_ENABLE_POST_GENERATION=true    # Set to true to enable, false to disable.\n# Define the time window (in minutes) between automatically generated posts.\n# The agent will pick a random interval within this range.\nTWITTER_POST_INTERVAL_MIN=60           # Example: Minimum 60 minutes between posts.\nTWITTER_POST_INTERVAL_MAX=180          # Example: Maximum 180 minutes between posts.\n\n# Automated Interactions (Optional)\n# Enable this feature to allow your agent to interact with mentions, replies to its tweets, etc.\nTWITTER_INTERACTION_ENABLE=true        # Set to true to enable, false to disable.\n# Interval in seconds for how often the agent checks for new interactions (mentions, replies).\nTWITTER_POLL_INTERVAL=120              # Example: Check every 120 seconds (2 minutes).\n"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Important:"})," The Twitter username, password, and email are required for authentication. Never commit your ",(0,s.jsx)(t.code,{children:".env"})," file containing real credentials to version control. Add ",(0,s.jsx)(t.code,{children:".env"})," to your ",(0,s.jsx)(t.code,{children:".gitignore"})," file to prevent accidental exposure."]}),"\n",(0,s.jsx)(t.h3,{id:"step-4-start-your-project",children:"Step 4: Start Your Project"}),"\n",(0,s.jsx)(t.p,{children:"Navigate to your project directory in the terminal and start the agent:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"# On Windows:\n# cd path\\to\\my-twitter-agent\n# elizaos start\n\n# On Mac/Linux:\ncd my-twitter-agent\nelizaos start\n"})}),"\n",(0,s.jsx)(t.p,{children:"Your Twitter agent is now running and will operate based on the configured environment variables and character definition."}),"\n",(0,s.jsx)(t.h2,{id:"customizing-your-twitter-agents-personality",children:"Customizing Your Twitter Agent's Personality"}),"\n",(0,s.jsx)(t.p,{children:"You can customize the agent's behavior, including its communication style, content focus, and interaction rules."}),"\n",(0,s.jsxs)(t.p,{children:["Open your project's ",(0,s.jsx)(t.code,{children:"src/index.ts"})," file in a code editor. Locate the ",(0,s.jsx)(t.code,{children:"character"})," definition:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-typescript",children:"export const character: Character = {\n  name: 'Eliza', // Define the agent's name\n  plugins: [\n    // List of enabled plugins\n    '@elizaos/plugin-sql',\n    ...(process.env.OPENAI_API_KEY ? ['@elizaos/plugin-openai'] : []),\n    ...(process.env.TWITTER_USERNAME ? ['@elizaos/plugin-twitter'] : []),\n    // Add other plugins as needed\n  ],\n  settings: {\n    secrets: {}, // Placeholder for plugin-specific secrets\n  },\n  system:\n    'Define the core instructions for the agent's behavior on Twitter. Example: Be informative, share tech news, and answer AI-related questions.',\n  bio: [\n    'List personality traits or behavioral guidelines.',\n    'Each string represents a distinct characteristic.',\n    'Example: Focuses on AI developments.',\n    'Example: Maintains a neutral and professional tone.',\n    'Example: Includes links to sources in relevant posts.',\n    'Example: Avoids engaging in controversial topics.',\n  ],\n  // Additional configuration options may exist below\n};\n"})}),"\n",(0,s.jsx)(t.p,{children:"Modify the following fields to tailor the agent's persona:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"name"})}),": The agent's display name."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"system"})}),": The primary prompt defining the agent's core function and behavior."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"bio"})}),": A list of strings detailing specific personality traits, knowledge domains, or interaction rules."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["After modifying the ",(0,s.jsx)(t.code,{children:"character"})," definition, save the file and restart the agent using the development mode for faster iteration:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"elizaos dev\n"})}),"\n",(0,s.jsx)(t.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(t.p,{children:"For more fine-grained control, consider adjusting the following:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Post Scheduling"}),": Modify ",(0,s.jsx)(t.code,{children:"TWITTER_POST_INTERVAL_MIN"})," and ",(0,s.jsx)(t.code,{children:"TWITTER_POST_INTERVAL_MAX"})," in the ",(0,s.jsx)(t.code,{children:".env"})," file to control posting frequency."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Topical Focus"}),": Refine the ",(0,s.jsx)(t.code,{children:"system"})," prompt in ",(0,s.jsx)(t.code,{children:"src/index.ts"})," to guide the agent towards specific subjects."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Interaction Logic"}),": Update the ",(0,s.jsx)(t.code,{children:"bio"})," list in ",(0,s.jsx)(t.code,{children:"src/index.ts"})," to define how the agent responds and interacts."]}),"\n"]}),"\n",(0,s.jsx)(t.h3,{id:"advanced-twitter-features",children:"Advanced Twitter Features"}),"\n",(0,s.jsxs)(t.p,{children:["For enhanced Twitter functionality, you can enable additional features by adding these environment variables to your ",(0,s.jsx)(t.code,{children:".env"})," file:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:'# Advanced Twitter Features\n\n# Timeline Interaction (Optional)\n# Allows the agent to monitor and potentially interact with posts on its Twitter timeline.\nTWITTER_TIMELINE_ENABLE=true           # Set to true to enable, false to disable.\n# Specifies which timeline to monitor. Common options:\n# "home": The main home timeline.\n# "user": Only tweets from specific users (requires further configuration if supported by the plugin version).\nTWITTER_TIMELINE_MODE=home             # Default is "home".\n# How often (in seconds) the agent checks the timeline for new posts.\nTWITTER_TIMELINE_POLL_INTERVAL=300     # Example: Check every 300 seconds (5 minutes).\n\n# Twitter Spaces Participation (Optional)\n# Enables the agent to join and participate in Twitter Spaces.\nTWITTER_SPACES_ENABLE=true             # Set to true to enable, false to disable.\n# If you want your agent to speak in Spaces using Text-to-Speech (TTS),\n# you need an ElevenLabs API key.\nELEVENLABS_XI_API_KEY=your_elevenlabs_api_key_here # Required for TTS in Spaces.\n'})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Timeline Features:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TWITTER_TIMELINE_ENABLE"}),": When set to ",(0,s.jsx)(t.code,{children:"true"}),", allows the agent to monitor and interact with posts in its configured timeline. This can include liking, retweeting, quoting, or replying to tweets based on the agent's defined logic."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TWITTER_TIMELINE_MODE"}),': Specifies which timeline to monitor (e.g., "home" for the agent\'s main home timeline).']}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TWITTER_TIMELINE_POLL_INTERVAL"}),": Controls how often (in seconds) the agent checks the specified timeline for new posts to process."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Spaces Features:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"TWITTER_SPACES_ENABLE"}),": When set to ",(0,s.jsx)(t.code,{children:"true"}),", enables the agent to join Twitter Spaces. Depending on its configuration, it might listen or even request to speak."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"ELEVENLABS_XI_API_KEY"}),": If ",(0,s.jsx)(t.code,{children:"TWITTER_SPACES_ENABLE"})," is true and you want your agent to speak using synthesized voice (Text-to-Speech), provide your ElevenLabs API key here."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note on Advanced Spaces Configuration:"})," While ",(0,s.jsx)(t.code,{children:"TWITTER_SPACES_ENABLE"})," turns the feature on/off, more detailed configurations for how the agent behaves in Spaces (e.g., whether it tries to host, maximum speakers it allows if hosting, typical duration, idle timeouts) are typically managed within your project's ",(0,s.jsx)(t.code,{children:"src/index.ts"})," file, under the ",(0,s.jsx)(t.code,{children:"character.settings.twitter.spaces"})," object. Refer to the plugin's documentation for specific details on configuring these behaviors."]}),"\n",(0,s.jsx)(t.h3,{id:"advanced-server-deployment-with-twitter-cookies",children:"Advanced: Server Deployment with Twitter Cookies"}),"\n",(0,s.jsx)(t.p,{children:"When deploying the agent to a server environment, standard username/password authentication might be insufficient due to Twitter's security measures. Using authentication cookies is often necessary."}),"\n",(0,s.jsx)(t.h4,{id:"obtaining-twitter-cookies-for-server-deployment",children:"Obtaining Twitter Cookies for Server Deployment"}),"\n",(0,s.jsx)(t.p,{children:"Follow these steps to extract the required cookies. Note that Twitter may flag logins from unfamiliar IP addresses, so performing these steps from an IP similar to your server's (e.g., via VPN) is recommended if possible."}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Log in"})," to Twitter via a web browser (Chrome, Firefox, Edge)."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Open Developer Tools"})," (usually F12)."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Navigate to the ",(0,s.jsx)(t.strong,{children:"Network"})," tab."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Refresh"})," the Twitter page (F5)."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["In the list of network requests, click on any request made to ",(0,s.jsx)(t.code,{children:"twitter.com"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:["Go to the ",(0,s.jsx)(t.strong,{children:"Cookies"})," tab within the request details."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:"Locate and copy the values for the following cookies:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"auth_token"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"ct0"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"guest_id"})," (This might be under a different domain like ",(0,s.jsx)(t.code,{children:"x.com"})," or ",(0,s.jsx)(t.code,{children:"twitter.com"})," depending on browser/timing)."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Add the copied values"})," to your ",(0,s.jsx)(t.code,{children:".env"})," file:"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"# Twitter Cookies for Server Deployment\nTWITTER_COOKIES_AUTH_TOKEN=your_auth_token_here\nTWITTER_COOKIES_CT0=your_ct0_token_here\nTWITTER_COOKIES_GUEST_ID=your_guest_id_here\n"})}),"\n",(0,s.jsx)(t.p,{children:"With these variables set, the agent running on your server should be able to authenticate using cookies."}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Security Note:"})," Remember to store your ",(0,s.jsx)(t.code,{children:".env"})," file securely and never commit it to version control, especially when containing sensitive cookie data. Ensure ",(0,s.jsx)(t.code,{children:".env"})," is listed in your ",(0,s.jsx)(t.code,{children:".gitignore"})," file."]})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);