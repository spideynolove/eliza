"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[81756],{60160:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"plugins/primus","title":"Unmaintained: this plugin needs a maintainer.","description":"A plugin to fully verify agent activities, including LLM access, actions, and interactions with external providers,","source":"@site/packages/plugins/primus.md","sourceDirName":"plugins","slug":"/plugins/primus","permalink":"/packages/plugins/primus","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"defaultSidebar","previous":{"title":"@elizaos/plugin-pdf","permalink":"/packages/plugins/pdf"},"next":{"title":"Pyth Data Plugin for ElizaOS","permalink":"/packages/plugins/pyth-data"}}');var r=t(31085),s=t(71184);const a={},o="Unmaintained: this plugin needs a maintainer.",c={},l=[{value:"Overview",id:"overview",level:2},{value:"Usage",id:"usage",level:2},{value:"LLM inference verification (PrimusAdapter)",id:"llm-inference-verification-primusadapter",level:3},{value:"Verify the interaction with Providers",id:"verify-the-interaction-with-providers",level:3},{value:"Verify the Actions",id:"verify-the-actions",level:3},{value:"Installation",id:"installation",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Run",id:"run",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"unmaintained-this-plugin-needs-a-maintainer",children:"Unmaintained: this plugin needs a maintainer."})}),"\n",(0,r.jsx)(n.h1,{id:"elizaosplugin-primus",children:"@elizaos/plugin-primus"}),"\n",(0,r.jsx)(n.p,{children:"A plugin to fully verify agent activities, including LLM access, actions, and interactions with external providers,\npowered by Primus' zkTLS protocol."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"In the Eliza framework, an agent consists of three key components: a brain (accessing an LLM), actions (the tasks the\nagent performs), and perception (gathering external information from providers). To fully verify agent activities, it's\nessential to ensure that the agent's thoughts, actions, and external information requests are all verifiable. This\nplugin enables full verification of these activities."}),"\n",(0,r.jsx)(n.p,{children:"The current plugin includes:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Verification of inference from OpenAI's LLM."}),"\n",(0,r.jsx)(n.li,{children:"An example for verifying actions, such as posting a tweet (this can be extended to any other actions)."}),"\n",(0,r.jsx)(n.li,{children:"An example to verify that the Bitcoin price is accurately fetched from Binance (this can be extended to any other data\nproviders)."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h3,{id:"llm-inference-verification-primusadapter",children:"LLM inference verification (PrimusAdapter)"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"PrimusAdapter"})," implements ",(0,r.jsx)(n.code,{children:"IVerifiableInferenceAdapter"})," and can be used as follows."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { PrimusAdapter } from '@elizaos/plugin-primus';\nimport { VerifiableInferenceOptions } from '@elizaos/core';\n\n// Initialize primus adapter\nconst primusAdatper = new PrimusAdapter({\n  appId: process.env.PRIMUS_APP_ID,\n  appSecret: process.env.PRIMUS_APP_SECRET,\n  // Choose MPC-TLS or Proxy-TLS\n  attMode: 'proxytls',\n  modelProvider: character.modelProvider,\n  token,\n});\n\ninterface PrimusOptions {\n  appId: string;\n  appSecret: string;\n  attMode: string;\n  modelProvider?: ModelProviderName;\n  token?: string;\n}\n\n// The options for generating an attestation\nconst options: VerifiableInferenceOptions = {\n  // Optional: Override the default endpoint\n  endpoint: 'https://api.openapi.com/chat/completions',\n  // Optional: Add custom headers\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: 'bearer Token',\n  },\n  // Optional: Provider-specific options\n  providerOptions: {\n    temperature: 0.7,\n  },\n};\n\n// Generate an attestation for a network request.\nconst result = await primusAdapter.generateText(context, 'gpt-4o', options);\n// Verify the validity of the attestation.\nconst isValid = await primusAdapter.verifyProof(result.proof);\n"})}),"\n",(0,r.jsxs)(n.p,{children:["The core functions in ",(0,r.jsx)(n.code,{children:"PrimusAdatper"})," are the following, which are also used in Actions and Providers."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"// Generate a zkTLS proof.\ngenerateProof = async (\n    // The target endpoint of the network request.\n    endpoint: string,\n    // The HTTP method of the request, such as 'GET', 'POST', etc.\n    method: string,\n    // A record containing the headers of the request.\n    headers: Record<string, any>,\n    // The body of the request. It should be a string.\n    body: string,\n    //A [JSONPath](https://datatracker.ietf.org/doc/rfc9535/) expression to locate the specific field in the response you want to attest.\n    responseParsePath: string\n): Promise<any>\n\n// Verify the proof.\nverifyProof = async (attestation: any): Promise<boolean>\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"verify-the-interaction-with-providers",children:"Verify the interaction with Providers"}),"\n",(0,r.jsx)(n.p,{children:"Here\u2019s an example showcasing how to verify the validity of the BTC price retrieved from Binance. Developers can easily customize this process for other providers."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const tokenPriceProvider: Provider = {\n    get: async (runtime: IAgentRuntime, message: Memory, _state?: State) => {\n        // Set the URL\n        const url = "https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT";\n        const method = \'GET\';\n        const headers = {\n            \'Accept\t\': \'*/*\',\n        };\n        // Generate the proof\n        const attestation = await generateProof(url, method, headers, "", "$.price");\n        // Verify the proof.\n        const valid = await verifyProof(attestation);\n        if (!valid) {\n            throw new Error("Invalid price attestation");\n        }\n    ......\n    },\n};\n'})}),"\n",(0,r.jsx)(n.h3,{id:"verify-the-actions",children:"Verify the Actions"}),"\n",(0,r.jsxs)(n.p,{children:["Below is an example showcasing how to post price information from the ",(0,r.jsx)(n.a,{href:"./src/providers/tokenPriceProvider.ts",children:"tokenPriceProvider"})," to Twitter. Developers can easily adapt this process for other providers."]}),"\n",(0,r.jsxs)(n.p,{children:["Note that you need to configure the ",(0,r.jsx)(n.code,{children:".env"})," file correctly to post tweets."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const postTweetAction: Action = {\n  description: 'Post a tweet on Twitter and be verified by Primus',\n  examples: [],\n  handler: async (runtime: IAgentRuntime, message: Memory, state?: State): Promise<boolean> => {\n    const contentYouWantToPost = await tokenPriceProvider.get(runtime, message, state);\n    const endpoint = 'https://twitter.com/i/api/graphql/a1p9RWpkYKBjWv_I3WzS-A/CreateTweet';\n    const method = 'POST';\n    const attestation = await generateProof(\n      endpoint,\n      method,\n      headers,\n      bodyStr,\n      '$.data.create_tweet.tweet_results.result.rest_id'\n    );\n    elizaLogger.info('Tweet posting proof generated successfully:', attestation);\n    const verifyResult = verifyProof(attestation);\n    if (!verifyResult) {\n      throw new Error('Attestation verify failed, data from source is illegality');\n    }\n  },\n  name: 'POST_TWEET',\n  similes: [],\n  validate: async (runtime: IAgentRuntime, message: Memory, state?: State) => {\n    const hasCredentials = !!process.env.TWITTER_USERNAME && !!process.env.TWITTER_PASSWORD;\n    elizaLogger.log(`Has credentials: ${hasCredentials}`);\n\n    return hasCredentials;\n  },\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"bun add @elizaos/plugin-primus\n"})}),"\n",(0,r.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Add the following environment variables to your .env file:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"PRIMUS_APP_ID=your_app_id\nPRIMUS_APP_SECRET=your_app_secret\nVERIFIABLE_INFERENCE_ENABLED=true\nVERIFIABLE_INFERENCE_PROVIDER=primus\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.em,{children:"How to get PRIMUS_APP_ID and PRIMUS_APP_SECRET"})})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Visit the ",(0,r.jsx)(n.a,{href:"https://dev.primuslabs.xyz/",children:"Primus Developer Hub"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Create a new project"}),"\n",(0,r.jsx)(n.li,{children:"Save your 'Application ID(PRIMUS_APP_ID)' and 'Secret Key(PRIMUS_APP_SECRET)'"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["To use the plugin, add ",(0,r.jsx)(n.code,{children:"@elizaos/plugin-primus"})," to the plugins field in your character file. Here's an example of how your character file might look after the update:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "name": "trump",\n  "modelProvider": "openai",\n  // just support openai now\n  "plugins": [\n    "@elizaos/plugin-primus"\n  ],\n  // other  fields\n  .....\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"run",children:"Run"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'# Start the server\nbun start --characters="characters/xxx.character.json"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Visit ",(0,r.jsx)(n.a,{href:"https://localhost:3000",children:"https://localhost:3000"})," to interact with your agent through a web interface."]}),"\n",(0,r.jsx)(n.p,{children:'You can ask the agent: "Get the BTC price and tweet."'})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},71184:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(14041);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);