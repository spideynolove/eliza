"use strict";(self.webpackChunk_elizaos_docs=self.webpackChunk_elizaos_docs||[]).push([[61900],{7303:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"core/project","title":"Project System","description":"Understanding ElizaOS projects - organizational structure for creating and deploying AI agents","source":"@site/docs/core/project.md","sourceDirName":"core","slug":"/core/project","permalink":"/docs/core/project","draft":false,"unlisted":false,"editUrl":"https://github.com/elizaos/eliza/tree/develop/packages/docs/docs/core/project.md","tags":[],"version":"current","lastUpdatedBy":"Christopher Trimboli","lastUpdatedAt":1749078171000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Project System","description":"Understanding ElizaOS projects - organizational structure for creating and deploying AI agents","keywords":["projects","organization","configuration","character","agents","deployment"],"image":"/img/project.jpg"},"sidebar":"tutorialSidebar","previous":{"title":"Plugins","permalink":"/docs/core/plugins"},"next":{"title":"Providers","permalink":"/docs/core/providers"}}');var r=i(31085),s=i(71184);const a={sidebar_position:2,title:"Project System",description:"Understanding ElizaOS projects - organizational structure for creating and deploying AI agents",keywords:["projects","organization","configuration","character","agents","deployment"],image:"/img/project.jpg"},c="\ud83d\udcdd ElizaOS Projects",o={},l=[{value:"Project Structure",id:"project-structure",level:2},{value:"Creating a New Project",id:"creating-a-new-project",level:2},{value:"Project Configuration",id:"project-configuration",level:2},{value:"Character Configuration",id:"character-configuration",level:2},{value:"Required Character Fields",id:"required-character-fields",level:3},{value:"Plugins",id:"plugins",level:3},{value:"Settings Configuration",id:"settings-configuration",level:3},{value:"Bio &amp; Style",id:"bio--style",level:3},{value:"Optional Character Fields",id:"optional-character-fields",level:3},{value:"Knowledge Management",id:"knowledge-management",level:2},{value:"Classic Mode (Default)",id:"classic-mode-default",level:3},{value:"RAG Mode",id:"rag-mode",level:3},{value:"Knowledge Path Configuration",id:"knowledge-path-configuration",level:3},{value:"Example Project",id:"example-project",level:2},{value:"Character File Export",id:"character-file-export",level:2},{value:"Managing Multiple Agents",id:"managing-multiple-agents",level:2},{value:"Running Your Project",id:"running-your-project",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"-elizaos-projects",children:"\ud83d\udcdd ElizaOS Projects"})}),"\n",(0,r.jsx)(n.p,{children:"Projects are the main organizational structure in ElizaOS, containing all the necessary components to create and deploy AI agents. A project can include one or more agents, each with their own character definition, plugins, and configurations."}),"\n",(0,r.jsx)(n.h2,{id:"project-structure",children:"Project Structure"}),"\n",(0,r.jsx)(n.p,{children:"A typical ElizaOS project structure:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"my-eliza-project/\n\u251c\u2500\u2500 src/\n\u2502   \u2514\u2500\u2500 index.ts        # Main entry point\n\u251c\u2500\u2500 knowledge/          # Knowledge base files\n\u251c\u2500\u2500 package.json        # Dependencies and scripts\n\u2514\u2500\u2500 tsconfig.json       # TypeScript configuration\n"})}),"\n",(0,r.jsx)(n.h2,{id:"creating-a-new-project",children:"Creating a New Project"}),"\n",(0,r.jsx)(n.p,{children:"You can create a new ElizaOS project using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"# Using bun (recommended)\nbun create eliza\n\n# Or using bunx\nbunx @elizaos/cli create\n"})}),"\n",(0,r.jsx)(n.p,{children:"The CLI will guide you through the setup process, including:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Project name"}),"\n",(0,r.jsx)(n.li,{children:"Database selection (sqlite, postgres, etc.)"}),"\n",(0,r.jsx)(n.li,{children:"Initial configuration"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"project-configuration",children:"Project Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The main project file (",(0,r.jsx)(n.code,{children:"src/index.ts"}),") exports a default project object:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import type { Character, IAgentRuntime, Project, ProjectAgent } from '@elizaos/core';\nimport customPlugin from './plugin';\n\n// Define the character\nexport const character: Character = {\n  name: 'Agent Name',\n  plugins: ['@elizaos/plugin-discord', '@elizaos/plugin-direct'],\n  // Other character properties\n};\n\n// Create a ProjectAgent that includes the character\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => {\n    // Initialize agent-specific functionality\n    console.log('Initializing agent:', character.name);\n  },\n  plugins: [customPlugin],\n  tests: [], // Optional tests for your agent\n};\n\n// Export the full project with all agents\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport default project;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"character-configuration",children:"Character Configuration"}),"\n",(0,r.jsx)(n.p,{children:"Each agent in your project requires a character definition that controls its personality, knowledge, and behavior."}),"\n",(0,r.jsx)(n.h3,{id:"required-character-fields",children:"Required Character Fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'{\n  name: "agentName", // Character\'s display name\n  plugins: ["@elizaos/plugin-discord"], // Example plugins\n  settings: {\n    // Configuration settings\n    secrets: {}, // API keys and sensitive data\n    voice: {}, // Voice configuration\n  },\n  bio: [], // Character background as a string or array of statements\n  style: {\n    // Interaction style guide\n    all: [], // General style rules\n    chat: [], // Chat-specific style\n    post: [] // Post-specific style\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"plugins",children:"Plugins"}),"\n",(0,r.jsx)(n.p,{children:"Plugins provide your agent with capabilities and integrations:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-discord"}),": Discord integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-telegram"}),": Telegram integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-twitter"}),": Twitter/X integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-slack"}),": Slack integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-direct"}),": Direct chat interface"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"@elizaos/plugin-simsai"}),": SimsAI platform integration"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["View all available plugins: ",(0,r.jsx)(n.a,{href:"https://github.com/elizaos-plugins/registry",children:"https://github.com/elizaos-plugins/registry"})]}),"\n",(0,r.jsx)(n.h3,{id:"settings-configuration",children:"Settings Configuration"}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"settings"})," object supports various configurations:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'{\n  "settings": {\n    "ragKnowledge": false, // Enable RAG knowledge mode\n    "voice": {\n      "model": "string", // Voice synthesis model\n      "url": "string" // Optional voice API URL\n    },\n    "secrets": {\n      // API keys (use env vars in production)\n      "API_KEY": "string"\n    },\n  }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"bio--style",children:"Bio & Style"}),"\n",(0,r.jsx)(n.p,{children:"Define your agent's personality and communication style:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'{\n  "bio": ["Expert in blockchain development", "Specializes in DeFi protocols"],\n  "style": {\n    "all": [\n      // Applied to all interactions\n      "Keep responses clear",\n      "Maintain professional tone"\n    ],\n    "chat": [\n      // Chat-specific style\n      "Engage with curiosity",\n      "Provide explanations"\n    ],\n    "post": [\n      // Social post style\n      "Keep posts informative",\n      "Focus on key points"\n    ]\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Style Tips"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Be specific about tone and mannerisms"}),"\n",(0,r.jsx)(n.li,{children:"Include platform-specific guidance"}),"\n",(0,r.jsx)(n.li,{children:"Define clear boundaries and limitations"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"optional-character-fields",children:"Optional Character Fields"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'{\n  "username": "handle", // Character\'s username/handle\n  "system": "System prompt text", // Custom system prompt\n  "lore": [], // Additional background/history\n  "knowledge": [\n    // Knowledge base entries\n    "Direct string knowledge",\n    { "path": "file/path.md", "shared": false },\n    { "directory": "knowledge/path", "shared": false }\n  ],\n  "messageExamples": [], // Example conversations\n  "postExamples": [], // Example social posts\n  "topics": [], // Areas of expertise\n  "adjectives": [] // Character traits\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"knowledge-management",children:"Knowledge Management"}),"\n",(0,r.jsx)(n.p,{children:"ElizaOS supports two knowledge modes:"}),"\n",(0,r.jsx)(n.h3,{id:"classic-mode-default",children:"Classic Mode (Default)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Direct string knowledge added to character's context"}),"\n",(0,r.jsx)(n.li,{children:"No chunking or semantic search"}),"\n",(0,r.jsxs)(n.li,{children:["Enabled by default (",(0,r.jsx)(n.code,{children:"settings.ragKnowledge: false"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Only processes string knowledge entries"}),"\n",(0,r.jsx)(n.li,{children:"Simpler but less sophisticated"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"rag-mode",children:"RAG Mode"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Advanced knowledge processing with semantic search"}),"\n",(0,r.jsx)(n.li,{children:"Chunks content and uses embeddings"}),"\n",(0,r.jsxs)(n.li,{children:["Must be explicitly enabled (",(0,r.jsx)(n.code,{children:"settings.ragKnowledge: true"}),")"]}),"\n",(0,r.jsxs)(n.li,{children:["Supports three knowledge types:","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Direct string knowledge"}),"\n",(0,r.jsxs)(n.li,{children:["Single file references: ",(0,r.jsx)(n.code,{children:'{ "path": "path/to/file.md", "shared": false }'})]}),"\n",(0,r.jsxs)(n.li,{children:["Directory references: ",(0,r.jsx)(n.code,{children:'{ "directory": "knowledge/dir", "shared": false }'})]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Supported file types: .md, .txt, .pdf"}),"\n",(0,r.jsxs)(n.li,{children:["Optional ",(0,r.jsx)(n.code,{children:"shared"})," flag for knowledge reuse across characters"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"knowledge-path-configuration",children:"Knowledge Path Configuration"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Knowledge files are relative to the project's ",(0,r.jsx)(n.code,{children:"knowledge"})," directory"]}),"\n",(0,r.jsxs)(n.li,{children:["Paths should not contain ",(0,r.jsx)(n.code,{children:"../"})," (sanitized for security)"]}),"\n",(0,r.jsx)(n.li,{children:"Both shared and private knowledge supported"}),"\n",(0,r.jsx)(n.li,{children:"Files automatically reloaded if content changes"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-project",children:"Example Project"}),"\n",(0,r.jsx)(n.p,{children:"Here's a complete example of a project configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import type { Character, IAgentRuntime, Project, ProjectAgent } from '@elizaos/core';\n\nexport const character: Character = {\n  name: 'Tech Helper',\n  plugins: ['@elizaos/plugin-discord', '@elizaos/plugin-direct'],\n  settings: {\n    ragKnowledge: true,\n    voice: {\n      model: 'en_US-male-medium',\n    },\n    discord: {\n      shouldRespondOnlyToMentions: false,\n      allowedChannelIds: ['123456789012345678'],\n    },\n  },\n  bio: ['Friendly technical assistant', 'Specializes in explaining complex topics simply'],\n  lore: ['Pioneer in open-source AI development', 'Advocate for AI accessibility'],\n  messageExamples: [\n    [\n      {\n        name: 'user1',\n        content: { text: 'Can you explain how AI models work?' },\n      },\n      {\n        name: 'TechAI',\n        content: {\n          text: 'Think of AI models like pattern recognition systems.',\n        },\n      },\n    ],\n  ],\n  topics: ['artificial intelligence', 'machine learning', 'technology education'],\n  knowledge: [\n    {\n      directory: 'tech_guides',\n      shared: true,\n    },\n  ],\n  style: {\n    all: ['Clear', 'Patient', 'Educational'],\n    chat: ['Interactive', 'Supportive'],\n    post: ['Concise', 'Informative'],\n  },\n};\n\nexport const projectAgent: ProjectAgent = {\n  character,\n  init: async (runtime: IAgentRuntime) => {\n    console.log('Initializing Tech Helper agent');\n  },\n  plugins: [], // Project-specific plugins\n};\n\nconst project: Project = {\n  agents: [projectAgent],\n};\n\nexport default project;\n"})}),"\n",(0,r.jsx)(n.h2,{id:"character-file-export",children:"Character File Export"}),"\n",(0,r.jsx)(n.p,{children:"While projects are the primary structure in ElizaOS, you can still export standalone character files for compatibility with other systems or sharing character definitions:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import fs from 'fs';\nimport { character } from './src/index';\n\n// Export character to JSON file\nfs.writeFileSync('character.json', JSON.stringify(character, null, 2));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"managing-multiple-agents",children:"Managing Multiple Agents"}),"\n",(0,r.jsx)(n.p,{children:"A project can contain multiple agents, each with its own character and plugins:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const project: Project = {\n  agents: [\n    {\n      character: technicalSupportCharacter,\n      init: async (runtime) => {\n        /* init code */\n      },\n      plugins: [customSupportPlugin],\n    },\n    {\n      character: communityManagerCharacter,\n      init: async (runtime) => {\n        /* init code */\n      },\n      plugins: [communityPlugin],\n    },\n  ],\n};\n"})}),"\n",(0,r.jsx)(n.p,{children:"Each agent operates independently but can share the same database and resources."}),"\n",(0,r.jsx)(n.h2,{id:"running-your-project",children:"Running Your Project"}),"\n",(0,r.jsx)(n.p,{children:"After configuring your project, you can run it using:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"elizaos start\n"})}),"\n",(0,r.jsx)(n.p,{children:"This will start your agents according to your project configuration."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},71184:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>c});var t=i(14041);const r={},s=t.createContext(r);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);